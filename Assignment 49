Question 16: Develop a Flutter application that includes a TextFormField for user input. The data entered into the TextFormField should be persistently stored in local storage. When the user reopens the app, the previously entered text should be displayed in the TextFormField. 
Source code:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(const PersistentTextApp());
}

class PersistentTextApp extends StatelessWidget {
  const PersistentTextApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Persistent TextFormField Example',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const PersistentTextPage(),
    );
  }
}

class PersistentTextPage extends StatefulWidget {
  const PersistentTextPage({super.key});

  @override
  State<PersistentTextPage> createState() => _PersistentTextPageState();
}

class _PersistentTextPageState extends State<PersistentTextPage> {
  final TextEditingController _controller = TextEditingController();
  final String _storageKey = "user_input";

  @override
  void initState() {
    super.initState();
    _loadSavedText();
  }

  /// Loads the previously stored text when the app starts
  Future<void> _loadSavedText() async {
    final prefs = await SharedPreferences.getInstance();
    String? savedText = prefs.getString(_storageKey);
    if (savedText != null) {
      setState(() {
        _controller.text = savedText;
      });
    }
  }

  /// Saves the text whenever it changes
  Future<void> _saveText(String value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_storageKey, value);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Persistent Text Storage")),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          child: TextFormField(
            controller: _controller,
            decoration: const InputDecoration(
              labelText: "Enter text",
              border: OutlineInputBorder(),
            ),
            onChanged: (value) {
              _saveText(value); // Save whenever the user types
            },
          ),
        ),
      ),
    );
  }
}

